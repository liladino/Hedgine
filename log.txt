Date:	Dec 7 2024:
	Move logic:
		Added "Unit" tests, and discovered that the move generation has a bug.
		NOT FIXED YET
		Probably i'll redo the move generation completely.
		The old algorithm finished the tests (except the failing) with an 
		average of 0m12,247s. Strangely, this time is worse with O3 than O2, so
		I used the latter.
	UCI:
		Bug fix: if there are multiple whitespaces after a move token, the 
		program reads it correctly.

Date:	Oct 9 2024:
	UCI:
		some of the bugs magically disasppeared. 
		Debug gets logged in a seperate file, so i can test it with differet 
		GUIs too, arenaGUI is a bit lackluster.
	Mate scores:
		needs testing with mate in x positions, and have to rethink the mate TT
		mate scoring, as it's values are often strange.
		
Date:   Oct 8 2024:
	PV search introduces bugs. Needs further testing.
		Namely illegal moves in the pv that gets printed out, and unreasonably 
		high values in some search variations (5 or more in a materially equal
		position). Sometimes makes weird blunders as well. 
	UCI:
		Starting a new game sometimes leads to unexpected bugs and illegal moves
		
		When the program is optimized (-O2), the outputs sometimes won't arrive 
		in time.
		
Date:   Sep 16 2024:
	TT:
		The alpha-beta loader still needs to be tested, as im not sure the alpha
		and beta adjustment are correct.
		
	UCI:
		mate in x is now following conventions (positive if the engine mates, 
		negative if engine gets mated). Might need to get debugged, sometimes it
		puts out weird stuff
		
	Search:
		Introduced a bug before, where the engine can blunder something as the 
		search is cancelled. With the reordering of the search cancel condition
		it seems to be gone.
		
	Eval:
		changed out the evaluation tables slightly, so that the values are a bit
		less extreme. 
		BUG:
			sometimes during the search there are unreasonably high scores for 
			one side (+1000 for a position with no material advantage)
		
Date:   Sep 15 2024:
	Repetition table:
		small progress, shortly it should be working.
	TT:
		somehow after all this time i still cant get it right :((
		
	Refactoring:
		changed out some functions to access boards with pointers. Also changed
		several const bitboard* occasions to const bitboard* const, as their 
		values arent changed in the function. 

Date:   Sep 13 2024:
	Repetition table:
		it is a single array of hashes. Thought about quadratic hashing, but the
		removing and writing of new elements is a whole lot more difficult, so
		I'm not convinced if this is a speed increase with such small elements
		and	table sizes.

Date:   Sep 12 2024:
	Engine:
		Evaluation is now separated into a different unit, as i'd like to rework
		parts of it. 
		The thinking time now depends on the increment to:
			thinking time = increment + old think time
			
	Repetition table:
		after trying out n ideas, i decided to not reinvent the wheel.
			
Date:   Sep 11 2024:
	Output:
		printLegalmoves migrated to output.c
	Engine:
		rearranged the file a bit, so that the order of the functions make a bit
		more sense. Also now there are some coments wht those functions are
		doing generally.
		
		Also started working on PV search.
		
	UCI:
		mate is n moves away now correctly outputted

Date:   Sep 10 2024:
	Engine:
		i forgot to dereference the bool pointer tomove when passing it to the 
		engine to start thinking. It caused the engine to always think it's 
		black, because it got a non-zero value into tomove (a pointer). For some 
		(for me) unexplainable reasons this doesn't even gave me a warning.
	UCI:
		the sudden illegal moves seemed to stop, tho i have limitid idea what 
		actually caused the bug.
		Move input:
			changed the behaviour when an illegal move is recieved:
			if an illegal move is recieved, the program exits, instead of 
			waiting for a legal move. The latter was not good practice, as it
			left the engine unresponsive to further input

Date:   Sep 05 2024
	UCI:
		bugs:
			when the engine sopped thinging, and we start a new game with 
			ucinewgame, it could make an illegal moves
			
		
Date:   Sep 04 2024
	UCI:
		GOOD NEWS, EVERYONE
		a very very basic version of the UCI engine now works! Can even be used 
		with Arena GUI,and I'm as happy as it gets
		
		Still it's a long way to go, as some important features are missing - 
		mainly the repetition detection and the transposition table along with 
		it.
		
		It'd be cool too if some basic openings were to be implemented.
	
		parse position now works! - can read a starting fen and the following 
		legal moves. parse go seems to be working as well

Date:   Sep 03 2024
	UCI:
		Some stuff now works, mainly the milisec specified thinking time, and 
		the stop command. Forked the functions from BBC by Code Monkey King & 
		VICE by bluefeversoft. 

Date:   Aug 31 2024
	Hedgine:
		separated into a new program. Goal is to be UCI compatible, and to be 
		used with e.g. PyChess, or any other programs. The main goal is it to be
		tested by making it play against itself some games, so that i actually
		know if i made it better or not
		
		Looked at the UCI protocol, and started implementing some utility
		functions (getLineDynamic, and one that manages a game internally).
		
		Plans:
			Have a separate repetition table, which should prevent loops in
			endgames.
			Have a small opening book:
				don't know what's the best option, but i'm thinking about
				generating a file from drawn GM/high level games, and storing
				the frist 5 or so positions of them, 
	CLC:
		currently abandoned, if hedgine is working properly with uci, i will
		make an interface here too.
	
Date:   Aug 26 2024
	Hashing:
		During hashing the position is now accessed via a pointer 
	PV:
		have to rework the PV system, the TT isn't much help this way. Probably
		doing something among the lines of a PV search, even if	maybe not
		interpreted completely. That way i dont need the PV hash array, just the
		alpha and beta scores, which tells me is the current node is a PV node
		or not.

Date:   Aug 23 2024
	FEN input:
		if the move counters aren't present, it printed out a message twice. The
		message was unnecesary, so now it doesn't print anything
	SAN input:
		fixed the bug where the move is considered invalid, if it is in the form
		of for example N6xe5 (taking and the rank is specified)
	eval:
		pawn is slightly changed, now it heavily favors going forward in the
		endgame

Date:   Aug 22 2024
	PV:
		Now the best line seems to be working

Date:   Aug 21 2024
	TT:
		Less buggy, but I'm not impressed with it, as it doesn't really help 
		uch with the speed and depth reached. Turns out i messed up something
		agian, tomorrow ill look at it again.
	PV:
		still faulty at times, not sure why

Date:   Aug 20 2024
	Best line:
		renamed to be principal variation, as it is it's standard name. Also
		fixed bugs with it, now it should print the moves correctly. Fixed a 
		bug, where if the line ends shorter than the max depth, a faulty move
		can occur (e.g. one side is already checkmated)
	TT:
		still buggy, so currently not working. 

Date:   Sun Aug 18 15:33:15 2024 +0200
	Added time limits: 
		The search is 4 plyes minimum, and extends indefinetly, while it is
		within the limits of thinking time.
		SIGALRM is used to achieve this.
		
		Might change this later to actually cut the tree search if the time is
		up, not necceseraly after one finished search.
		
	TransTable elements shortened:
		Now doesn't contain the next position's hash or the best move, just
		the current hash, the evaluation and the flag. A new flag added, that
		signals that it was the best move in the last search. This ensures,
		that the next search begins with this move
		
		BUGS, BUGS, EVERYEHRE
		Somehow i messed up mates, and now the easy endgames arent as easy,
		because the TT gives faulty results regarding mates.
		
	Eval:
		changed the king slightly to make it's position less relevant for the
		attacking side. There is something going on with it tho, as sometimes it
		says a king - king+rook position is sometimes better for the empty king
	
	Best line:
		I'm too tired to debug this, or to even be sure this works, it's just
		there, hoping to be used.
		


Date:   Wed Feb 28 19:13:10 2024 +0100

	Fixed fen input bug
	
	It never read the halfmove and the move counter, because i forgot how sscanf
	works :((
	
	Toggled one - to + in the engine, because it may have misinterpreted some
	positions, where there are multiple mates with different lengths, and it
	wouldn't found the shortest.
	
	Changed the formatting of printmove to represent the more often used format
	with no spaces, and only lowercase letters.
	e.g. e7 e8 Q => e7e8q



Date:   Thu Feb 22 23:08:59 2024 +0100
	Written the move ordering function
	
	not implemented yet, as it may needs some xtra care.
	There are a lot of collisions in the hash table, which is,
	at the moment 1 Mb. I tried varying the seed, and it does
	seem like the case is slightly nicer, but we need to be
	careful anyways. The logic was a bit messy at first because
	of this not using a pure minimax search, but maybe now it is right.



Date:   Mon Feb 19 19:38:59 2024 +0100

	Fixed undo bug
	
	When a move was undone, and it was played again, the eval immediately
	returned the eval froom hash without setting the next move. Now this
	was no problem if only one move was undone, because it remained in
	the global variable, but when multiple, it made a move that was
	basically memory junk in that pos.



Date:   Sun Feb 18 21:36:30 2024 +0100

	Started working on iterative deepening now



Date:   Sun Feb 18 20:46:13 2024 +0100

	Hashing bug fixed
	
	I messed up the brackets with TableSize, so it didn't write
	hashkey % Tablesize, but rather
	hashkey % 1 * 1024 * 1024 / sizeof(hashelement)
